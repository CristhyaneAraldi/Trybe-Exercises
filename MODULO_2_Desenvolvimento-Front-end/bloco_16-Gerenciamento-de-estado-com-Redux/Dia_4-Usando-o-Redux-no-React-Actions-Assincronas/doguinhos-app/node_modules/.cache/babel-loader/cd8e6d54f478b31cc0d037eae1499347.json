{"ast":null,"code":"// import { createStore } from 'redux'; -> alterado devido inserção do thunk\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nconst GET_IMAGE = 'GET_IMAGE';\nconst REQUEST_IMAGE = 'REQUEST_IMAGE';\nconst FAILED_REQUEST = 'FAILED_REQUEST';\n\nfunction getImage(json) {\n  return {\n    type: GET_IMAGE,\n    payload: json.message\n  };\n}\n\nfunction requestDog() {\n  return {\n    type: REQUEST_IMAGE\n  };\n}\n\nfunction failedRequest(error) {\n  return {\n    type: FAILED_REQUEST,\n    payload: error\n  };\n}\n\nexport function fetchDog() {\n  return dispatch => {\n    dispatch(requestDog());\n    return fetch('https://dog.ceo/api/breeds/image/random').then(r => r.json().then(json => dispatch(getImage(json)), error => dispatch(failedRequest(error))));\n  };\n}\nconst initialState = {\n  isFetching: false,\n  imagePath: '',\n  error: ''\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case REQUEST_IMAGE:\n      return { ...state,\n        isFetching: true\n      };\n\n    case GET_IMAGE:\n      return { ...state,\n        imagePath: action.payload,\n        isFetching: false\n      };\n\n    case FAILED_REQUEST:\n      return { ...state,\n        error: action.payload,\n        isFetching: false\n      };\n\n    default:\n      return state;\n  }\n} // const store = createStore(reducer); -> alterado devido inserção do thunk\n\n\nconst store = createStore(reducer, applyMiddleware(thunk));\nexport default store; // por boa prática, separaria este arquivo, tanto para manter o código mais fácil de ser lido, quanto para fazer da manutenção menos complexa","map":{"version":3,"sources":["/home/cris/Repositorios/Trybe-Exercises/MODULO_2_Desenvolvimento-Front-end/bloco_16-Gerenciamento-de-estado-com-Redux/Dia_4-Usando-o-Redux-no-React-Actions-Assincronas/doguinhos-app/src/store/index.js"],"names":["createStore","applyMiddleware","thunk","GET_IMAGE","REQUEST_IMAGE","FAILED_REQUEST","getImage","json","type","payload","message","requestDog","failedRequest","error","fetchDog","dispatch","fetch","then","r","initialState","isFetching","imagePath","reducer","state","action","store"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,cAAc,GAAG,gBAAvB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAO;AACLC,IAAAA,IAAI,EAAEL,SADD;AAELM,IAAAA,OAAO,EAAEF,IAAI,CAACG;AAFT,GAAP;AAID;;AAED,SAASC,UAAT,GAAsB;AACpB,SAAO;AACLH,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD;;AAED,SAASQ,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAO;AACLL,IAAAA,IAAI,EAAEH,cADD;AAELI,IAAAA,OAAO,EAAEI;AAFJ,GAAP;AAID;;AAED,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACA,WAAOK,KAAK,CAAC,yCAAD,CAAL,CACJC,IADI,CACEC,CAAD,IAAOA,CAAC,CAACX,IAAF,GACVU,IADU,CAERV,IAAD,IAAUQ,QAAQ,CAACT,QAAQ,CAACC,IAAD,CAAT,CAFT,EAGRM,KAAD,IAAWE,QAAQ,CAACH,aAAa,CAACC,KAAD,CAAd,CAHV,CADR,CAAP;AAMD,GARD;AASD;AAED,MAAMM,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBR,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,SAASS,OAAT,CAAiBC,KAAK,GAAGJ,YAAzB,EAAuCK,MAAvC,EAA+C;AAC7C,UAAQA,MAAM,CAAChB,IAAf;AACE,SAAKJ,aAAL;AACE,aAAO,EACL,GAAGmB,KADE;AAELH,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAIF,SAAKjB,SAAL;AACE,aAAO,EACL,GAAGoB,KADE;AAELF,QAAAA,SAAS,EAAEG,MAAM,CAACf,OAFb;AAGLW,QAAAA,UAAU,EAAE;AAHP,OAAP;;AAKF,SAAKf,cAAL;AACE,aAAO,EACL,GAAGkB,KADE;AAELV,QAAAA,KAAK,EAAEW,MAAM,CAACf,OAFT;AAGLW,QAAAA,UAAU,EAAE;AAHP,OAAP;;AAKF;AACE,aAAOG,KAAP;AAnBJ;AAqBD,C,CAED;;;AACA,MAAME,KAAK,GAAGzB,WAAW,CAACsB,OAAD,EAAUrB,eAAe,CAACC,KAAD,CAAzB,CAAzB;AAEA,eAAeuB,KAAf,C,CAEA","sourcesContent":["// import { createStore } from 'redux'; -> alterado devido inserção do thunk\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst GET_IMAGE = 'GET_IMAGE';\nconst REQUEST_IMAGE = 'REQUEST_IMAGE';\nconst FAILED_REQUEST = 'FAILED_REQUEST';\n\nfunction getImage(json) {\n  return { \n    type: GET_IMAGE, \n    payload: json.message \n  };\n}\n\nfunction requestDog() {\n  return { \n    type: REQUEST_IMAGE \n  };\n}\n\nfunction failedRequest(error) {\n  return { \n    type: FAILED_REQUEST, \n    payload: error \n  };\n}\n\nexport function fetchDog() {\n  return (dispatch) => {\n    dispatch(requestDog());\n    return fetch('https://dog.ceo/api/breeds/image/random')\n      .then((r) => r.json()\n        .then(\n          (json) => dispatch(getImage(json)),\n          (error) => dispatch(failedRequest(error)),\n        ));\n  };\n}\n\nconst initialState = {\n  isFetching: false,\n  imagePath: '',\n  error: '',\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case REQUEST_IMAGE:\n      return { \n        ...state, \n        isFetching: true \n      };\n    case GET_IMAGE:\n      return { \n        ...state, \n        imagePath: action.payload, \n        isFetching: false \n      };\n    case FAILED_REQUEST:\n      return { \n        ...state, \n        error: action.payload, \n        isFetching: false \n      };\n    default:\n      return state;\n  }\n}\n\n// const store = createStore(reducer); -> alterado devido inserção do thunk\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n\n// por boa prática, separaria este arquivo, tanto para manter o código mais fácil de ser lido, quanto para fazer da manutenção menos complexa"]},"metadata":{},"sourceType":"module"}